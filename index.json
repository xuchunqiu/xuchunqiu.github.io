[{"categories":null,"content":"BIOS 开机待屏幕点亮后按 DEL 进入 分区 软件安装路径 name version path nvidia-driver 430.4 /usr/src/nvidia-430.40/nvidia cuda 10.1 /usr/local/cuda nvcc 10.0.130 /usr/local/cuda/bin/ cuDNN 7.6.5 /usr/local/cuda/include nccl 2.5.6 /usr/local/lib docker 18.09.3 /usr/bin/docker nvidia-docker 2.0.3 /usr/bin/nvidia-docker python2 2.7.12 /usr/bin/python python3 3.5.2 /usr/bin/python3 AI Max 深度学习平台 AI Max是一款基于Kubernetes+Docker+GPU架构，定位于机器学习的上层应用，免去客户编写代码的麻烦，快速开始深度学习任务。通过容器化技术，封装了人工智能所需的系统环境和底层操作。 http://www.amaxchina.com/Product/Introduction/AIMAX ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:0:0","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"平台架构 对于用户来说，唯一需要了解并使用的就是 Docker。 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:1:0","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"Docker Docker 有三个基本概念： 镜像 image 操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker image 就相当于是一个 root 文件系统。通常会包含特定的程序、库、环境配置等。 容器 container container 由 image 建立，但不会反向影响 image。container 的实质是拥有独立命名空间的进程，这意味这它与宿主机隔离并拥有自己的 root 文件系统、网络配置、进程空间、用户 ID 空间等。 container 可以被 建立 / 启动 / 重启 / 停止 / 删除；container 可以被保存为新的 image；container 可以直接挂载宿主机目录。 仓库 repository 用于分发 image Docker 解决的痛点 在 AI Max 中进行训练的主要原因是可以实现平台和宿主机、平台内不同用户、同用户不同项目（在该平台中被称为「任务」或「应用」）间环境的 隔离 和 快速重建。 获取 Docker 镜像 除了 AI Max 平台预置的 Docker 镜像，还可在以下位置自行下载镜像： 下载镜像 - AIMAX 机器学习镜像库 手动上传 利用 Docker 镜像快速恢复工作状态 只有交互式开发模式下可以实现「将容器保存为镜像」的功能，这意味着所有的环境变量、软件包等配置都被保存在新的镜像中，实现了环境的快速重建。 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:1:1","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"如何训练 共有两种训练方式，其入口分别在： 模型训练 - 任务训练 模型训练 - 交互式开发 它们的环境都依托于 Docker 镜像，不同之处在于前者相当于一个简化的 PBS 作业提交界面，后者更类似本机训练。 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:2:0","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"任务训练 关键设置项： 程序代码入口文件 执行器 [python3 / python / shell] 机器学习库 [tensorflow / pytorch] 工作空间 超参数调整【可添加任意数目的键值对】 资源分配 选择镜像 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:2:1","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"交互式开发 关键设置项： 执行器 [Jupyer / Desktop / JupyterLab / Terminal] 工作空间 资源分配 选择镜像 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:2:2","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"如何可视化 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/:3:0","tags":null,"title":"PSC HC2S（TS40 X2）软件说明","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-software-infomation/"},{"categories":null,"content":"硬件信息 类型 型号 数量 规格 CPU Intel Xeon Gold 6254 @ 3.10GHz 2 Memory Samsung RDIMM ECC DDR4 2933MHz 288Pin with 32GB capacity 4 Motherboard Supermicro X11DPG-QT 1 GPU Nvidia RTX 2080 Ti 4 SSD Intel D3 S4610 Series 960GB 2.5\" NAND TLC SATA III SSD 1 HDD Western Digital Ultrastar DC HC320 8TB 3.5-inch Data Center Hard Drive 1 Power 1 2000W Network Adapter Intel Ethernet Controller 10G X550T Dual Ports 1 10GbE/5GbE/2.5GbE/1GbE/100Mb IO ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/:0:0","tags":null,"title":"PSC-HC2S（TS40-X2）硬件规格","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/"},{"categories":null,"content":"Back 使用 DE-9 接口的 RS-232 串行端口 USB Type-A 3.2 * 2、RJ45 Management USB Type-A 2.0 * 2 10GbE *2 VGA ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/:1:0","tags":null,"title":"PSC-HC2S（TS40-X2）硬件规格","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/"},{"categories":null,"content":"Top USB Type-A 3.2 * 2 ","date":"2020-11-16","objectID":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/:2:0","tags":null,"title":"PSC-HC2S（TS40-X2）硬件规格","uri":"/docs/psc-hc2s/psc-hc2s-aka-ts40-x2-hardware-specification/"},{"categories":null,"content":"这个博客之前放的都是之前在 notion 上记录的一些笔记，因为大师兄跟我讲说有一个技术博客对面试很加分，但其实面试的时候没有一个面试官跟我聊博客内容啊……总之现在也上班三个月了，是时候来水一篇生活记录了。 ","date":"2022-11-13","objectID":"/a-little-update-about-myself/:0:0","tags":null,"title":"近况更新·工作三个月之后","uri":"/a-little-update-about-myself/"},{"categories":null,"content":"工作 我入职的是广州黄埔区的一家生物初创公司的算法岗，入职两三天后赶上公司的开业典礼😂（其实公司是去年成立的，只是因为投资人的时间安排才拖到这个时间开）。工作时间的话是周一～周五早上 8:30 上班，中午 11:30 下班； 下午 13:00 上班，晚上 18:00 下班。住的地方步行到公司需要接近 30 分钟，以前会骑车上下班（12 分钟），但后来想多点运动所以这两周基本都是步行了，上下班步行 + 中午饭后散步差不多就能满足手表上 760 大卡的活动量 。 工作内容简单说就是用公司产出的数据训练预测模型。我们组的工作强度完全取决于上游给我们数据的速度，目前暂时是不加班的状态。但每天对着电脑 8 小时依然会让下班回家后眼睛特别累，所以午饭后我一般不午睡而是散步顺便放松 一下眼睛。 ","date":"2022-11-13","objectID":"/a-little-update-about-myself/:1:0","tags":null,"title":"近况更新·工作三个月之后","uri":"/a-little-update-about-myself/"},{"categories":null,"content":"生活 说起来是在广州但黄埔区这地方如果坐公共交通工具大概要一个小时多，基本是和以前从学校到市区的差不多的时间，加上我是一个不喜欢逛街的人，所以平时几乎不去市区。周末的休闲活动就是到处骑车。广州的公路骑行环境真是有够 糟糕的，几乎见不到单独的非机动车道，每次电动车、自行车都需要跟行人争路，在加上黄埔区这地方山多坡陡，骑起来实在不算享受。但不骑车我就失掉了唯一的周末运动量，所以还是在第一个月出粮后网上买了一辆硬尾山地车。 网上买车确实比线下门店更有性价比，但小问题还是挺多的比如蹭碟、变速滑档、坐垫太硬等，坑爹的是我推着新车去找出租屋附近的自行车修理店时老板拒绝了我，说你这个要到专门卖山地车的地方去修……无奈附近没有你说这种地方啊， 所以我被迫学会了调蹭碟、调变速，现在已经攒了一个工具箱出来（其实大部分放的是换下来的物件）。 广州用 Strava 的人还挺多的，可惜 GZcycle 俱乐部里面全是公路/Gravel 大佬，均速都 30 km/h 起步，而且团骑起点都离我很远。所以周末我一般就自己规划个 40~60 km 的圈松松腿。上个月咬咬牙买了个和自行车一样贵的 运动相机，如果有拍出好看的素材的话，未来在博客里发一下也说不定。 ","date":"2022-11-13","objectID":"/a-little-update-about-myself/:2:0","tags":null,"title":"近况更新·工作三个月之后","uri":"/a-little-update-about-myself/"},{"categories":null,"content":"在去年写完 Projector 的体验 之后，我就已经没有再使用过它了，原因如下： 必须安装客户端才能使用快捷键 服务端非本机部署时，必须在客户端主机上安装自签证书才能使用复制粘贴功能 因为网络传输不畅而不时遇到画质压缩，就只能等它连接稳定后再继续操作，使用体验不够连贯 所以之后我又用回了通过 SSH 来部署代码和调用远程 Python 解释器的方法。去年年底，JetBrains 在其博客上发布了《隆重推出 JetBrains IDE 的远程开发》一文介绍了 Gateway 这一全新的远程开发工具。最近我终于有时间来安装体验一下 Gateway，本文就是对这一过程的简单回顾。 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:0:0","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"0x00 前言 在开始之前必须强调的是，与 Projector 可以部署社区版 IDE 不同，要想通过 Gateway 连接到远程 IDE 则必须有对应的 IDE 订阅。我是通过学生 edu 邮箱获得的 JetBrains 全家桶订阅。 更多关于 Gateway 的常见问题可以参阅官方博文：《深入了解 JetBrains Gateway》 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:1:0","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"0x01 下载与安装 支持的操作系统： 服务端：Linux（未来会加入 Windows 和 macOS 的支持） 客户端：Linux、Windows、macOS（intel）、macOS（Apple Silicon） 与 Projector 不同，Gateway 服务端的安装完全通过客户端完成：下载地址 目前下载到的应该都 抢先体验计划Early Access Programs 的版本，截止本文写就时最新的版本是 2022.1 Beta (221.5080.102)，安装好后的主界面如下； 共有 SSH、JebBrains Space 和 共享链接 三种启动 Gateway 客户端的方式。区别如下： SSH：只要提供远程 Linux 主机的 SSH 连接信息即可，也是本文使用的方式 JetBrains Space：团队开发协作平台，有提供 基础的免费方案 Code With Me 链接 / Gateway 链接：前者是用于结对编程的 IDE 插件，同样有 基础的免费方案；后者的分享链接暂时还没有暴露出来，只有在连接到已有环境失败时才会显示出来 接下来就选择 SSH，提供远程 Linux 主机的连接信息： 成功后就可以选择需要在远程主机上安装哪个 IDE 服务端（在 Gateway 中被称为 Backend）。当前有 IDEA、CLion、GoLand、PhpStorm、PyCharm、Rider、RubyMine 和 WebStorm 可选（EAP 的 Gateway 看到的 IDE 也都是 EAPEarly Access Programs 或 RCRelease Candidate 版），但都不提供社区版的选项： 默认是直接从互联网下载 IDE Backend 安装到远程主机的 ~/. cache/JetBrains/RemoteDev/dist，也可以手动上传安装包和指定安装路径： 等待下载和安装过程完成，就会在本机自动打开 Gateway Client 了，与正常的 IDE 稍有区别的是多了一些连接状态的显示。整体上 Gateway 服务端的安装实在是比 Projector 省心太多。 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:2:0","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"0x02 Gateway 的使用感受 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:3:0","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"优点 比起在 Settings-Tools-SSH Configurations 添加 SSH 配置的远程开发方式，Gateway 不需要手动同步本地和远程代码（因为它的代码只保存在远程）、配置远程解释器。 比起 Projector 或是 VNC 方案，Gateway 画面永远不会糊。 剪贴板共享功能开箱即用。 支持将远程主机端口映射到本地。这个主要是因为我的远程主机是一个 Docker 环境，在创建好后就不能添加端口映射了，但 Gateway Client 的 Settings-Tools- Port Forwarding 里可以很方便地添加端口映射： ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:3:1","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"缺点 有时需要复制两遍。当在 Gateway Client 中打开的文本内容先复制再粘贴时，有机率粘上的是之前一次复制的内容，不过只要 Gateway Client 再复制一次就没问题了。 没有考虑非英文输入的情况。这篇博文就是通过 Gateway 完成的，在使用拼音输入中文的过程中，我注意到当打字速度过快时就会有前后「吃字」的问题。这可能是因为 Gateway 对于输入的每个字母都是立即传输的，但当汉字上屏后光标位置的瞬间跳动没有被正确处理。 上传文件功能缺失。拖动本地文件到 Gateway Client 的文件树上并不会有任何反应，如果这时能自动通过 SFTP 协议上传就好了。 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:3:2","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"0x03 补充：强制结束 IDE Backend 的方法 因为目前还处在 EAP 阶段，稳定度还不算太高，有时会遇到 IDE Backend 旧进程卡死新进程启动不起来的窘境，目前 Gateway 也没有提供强制重启之类的功能，只能手动去 kill 相关进程。在 Gateway 的 最近 SSH 项目Recent SSH Projects 页面有一个终端图标，点进去执行以下命令： user@machine:~# ps aux | grep -i pycharm | awk '{print $2}' 738 743 861 876 1138 2880 # 把以上所有进程号都杀掉 user@machine:~# kill 738 ","date":"2022-03-08","objectID":"/jetbrains-gateway-first-experiences/:4:0","tags":null,"title":"远程开发工具 JetBrains Gateway 初体验","uri":"/jetbrains-gateway-first-experiences/"},{"categories":null,"content":"嗨~ 我是CQCQ，来自河南，目前在西安读书。 平时我喜欢用单车探索城市，寻访没有去过的地方。日常在手机上使用 Arc 后台记录轨迹然后定期导入到 世界迷雾 中。下面是这几年我积攒的轨迹在世界迷雾中的样子。 ","date":"2021-08-21","objectID":"/about/me/:0:0","tags":null,"title":"关于我","uri":"/about/me/"},{"categories":null,"content":"简介 之前使用的公共节点 Zerotier 在学校之外的打洞成功率很差，因此换用 frp 。两者工作原理类似——依赖具有公网 IP 的中心节点中转。frp 的中心节点只能自建但相应的稳定性更优。 frp 基于认证的 stcp(secret tcp) 模式可以将内网服务安全地暴露到公网。frp 的可执行文件包括服务端（frps）与客户端（frpc），前者运行在具有公网 IP 的节点，后者运行在公网无法直接访问的、提供/使用服务的节点。.ini 后缀的文件记录了 frp节点间（不单是 frpc 与 frps，还包括 frpc 之间）的连接信息。 我们在阿里云上租用的 VPS 运行着 frps（连接不同 frpc 的桥梁），当前工作站上运行着 frpc（提供服务），而各位同学要在自己的电脑上同样运行 frpc（使用服务）。 快速上手 为了跑起来一个使用服务的 frpc，各位同学只需下载对应自己操作系统的 frpc，并使用正确的 *.ini 文件。 从 发布页面 下载 frpc。建议与 VPS 上运行的 frps 保持一致的版本（0.37.1）以减少出现问题的可能性。 解压压缩包并精简。frp 没有安装的概念，但下载到的压缩包是个大杂烩，可以按照下图删掉浅蓝色标注的文件/文件夹。 下载基本的 *.ini 文件。在解压目录中创建以下文件（覆盖原来的 frpc.ini）。这两个文件的内容未来修改的可能性非常低。 为什么需要多个配置文件？ 为了便于理解和维护，frp 支持对配置文件进行拆分。 实现方式是在主 .ini 文件中使用 includes 项记录需要的 子配置文件仅语义上的定义 的相对/绝对路径，并以半身逗号分隔。 特别要指出的是，即使指定的子配置文件不存在也不会影响 frp 运行。因此在 快速上手 部分即使我们没有 frpc.ini 中 includes 的 frpc_personal.ini 也能让 frpc 跑起来。 frpc.ini [common] # VPS 上 frps 的连接信息 server_addr = IP 地址 server_port = 端口号 authentication_method = token authenticate_new_work_conns = true token = 认证信息 includes = frpc_workstation_public.ini, frpc_personal.ini frpc_workstation_public.ini [AIMAX_Web] # 连接协议 type = stcp # 本机 frpc 的角色是服务使用者 role = visitor # 与工作站上 frpc 完全一致的校验信息 server_name = workstation_AIMAX_Web sk = 另一组认证信息 # 本机监听地址 bind_addr = 127.0.0.1 # 本机监听端口。指定访问 AIMAX 网页的端口号 bind_port = 8081 运行 frpc。打开本机上的终端，进入 frp 的解压目录，或者使用 Shift + 鼠标右键 的方式快速进入。 执行以下命令即可启动 frpc。 启动 frpc（Windows） ./frpc.exe -c ./frpc.ini -c 参数指定 config 文件，由于 frpc 默认会使用当前工作区下的 frpc.ini 文件。因此可以简化为： ./frpc 接下来打开本机浏览器访问 127.0.0.1:8081 即可访问到 AIMAX 的网页了： 如何停止 frpc？ 如需结束 frpc，在启动 frpc 的终端窗口内使用 Ctrl + c。 配置详解 在步骤二成功访问到 AIMAX 网页版后，需要开始编写 frpc_personal.ini 配置文件。 ","date":"2021-07-25","objectID":"/docs/psc-hc2s/remote-access-with-frp/:0:0","tags":"frp, 远程访问, 打洞, 教程","title":"如何使用 frp 安全访问实验室深度学习工作站","uri":"/docs/psc-hc2s/remote-access-with-frp/"},{"categories":null,"content":"原因 因为 AIMAX 本身的一些问题，导致远程访问下所有交互式开发环境都无法进入，但像创建交互式开发、上传下载私有/共享数据等操作是没问题的。 暂时的解决方案是对交互式开发里需要用到的每一个端口都生成一段 frpc 的配置（约定该文件的名称为 frpc_personal.ini ），因此需要同学们对 *.ini 文件的结构有一定概念。 ","date":"2021-07-25","objectID":"/docs/psc-hc2s/remote-access-with-frp/:1:0","tags":"frp, 远程访问, 打洞, 教程","title":"如何使用 frp 安全访问实验室深度学习工作站","uri":"/docs/psc-hc2s/remote-access-with-frp/"},{"categories":null,"content":"*.ini 文件结构说明 最基本的 *.ini 文件如下： [section] name=value 一个 section 对应一个服务，section 的名字完全不重要，写得自己能理解就好（可用中文）； 一个 *.ini 文件中可以有多个 section，它们之间以方括号区隔而非换行； 一个 section 下可以有多个 name,value 的对，它们之间没有先后顺序要求； name,value 对内部可以随意使用空格，name,value 对间可以随意使用换行； name,value 对内部大小写敏感； 行间注释以 ; 或 # 开头，没有行内注释。 ","date":"2021-07-25","objectID":"/docs/psc-hc2s/remote-access-with-frp/:2:0","tags":"frp, 远程访问, 打洞, 教程","title":"如何使用 frp 安全访问实验室深度学习工作站","uri":"/docs/psc-hc2s/remote-access-with-frp/"},{"categories":null,"content":"frpc_personal.ini 的编写 模板如下，有几个端口需要远程访问就写几个 section。section 下只有 service_name服务名、sk密码 强制修改，且严格与服务端配置完全对应。写好后保存为 frpc_personal.ini 放入解压缩文件夹中，再次启动 frpc。 需要远程访问的端口号填到哪里？ section 对应服务的远端端口号只在 frps 的配置文件中体现。 frpc_personal.ini [service1] # 固定不变 type = stcp # 固定不变 role = visitor # service_name, sk 必须严格与服务端配置完全对应 service_name = user_projector sk = 一个密码 # 本机监听地址。可改为 0.0.0.0 以允许本机和所在局域网内其它设备访问 bind_addr = 127.0.0.1 # 本机监听端口。可自定，要求不同服务的本机监听端口不能重复 bind_port = 8083 [service2] type = stcp role = visitor server_name = user_ssh sk = 另一个密码 bind_addr = 127.0.0.1 bind_port = 8084 根据 frpc 日志故障排除 注意必须先在终端中启动 frpc，才能通过浏览器（或其它软件）访问到 frpc 提供的远程页面。启动 frpc 的终端会输出日志。下图展示了如何根据日志信息分析可能的问题。其中3、4是要访问对应服务才能看出的错误。 ","date":"2021-07-25","objectID":"/docs/psc-hc2s/remote-access-with-frp/:3:0","tags":"frp, 远程访问, 打洞, 教程","title":"如何使用 frp 安全访问实验室深度学习工作站","uri":"/docs/psc-hc2s/remote-access-with-frp/"},{"categories":null,"content":"Projector 是 JetBrains 新推出的远程开发解决方案。实现上是在远程主机上部署 IDE 服务端然后在本地浏览器中或本地客户端中访问，本文记录了安装步骤和使用体验。 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:0:0","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"0x00 可能有用的链接 官方博客介绍：使用 Projector 远程访问 IDE 官方文档：Projector documentation 安装方式 A（命令行）：JetBrains/projector-installer 安装方式 B（docker）：JetBrains/projector-docker Win/macOS/Linux 客户端下载：releases on JetBrains/projector-client ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:1:0","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"0x01 安装步骤 本文是采用上面的安装方式 A 在运行 Ubuntu 18.04 的远程主机上运行，具体步骤直接参考链接 3。命令抄录如下： # install python3 user@machine:~# sudo apt install python3 python3-pip -y # check pip3 version user@machine:~# pip3 --version # if pip3 \u003c 19 user@machine:~# python3 -m pip install -U pip # install other packages user@machine:~# sudo apt install libxext6 libxrender1 libxtst6 libfreetype6 libxi6 less -y # install Jetrains Projector user@machine:~# ip3 install projector-installer --user # use Projector to install IDE user@machine:~# projector install Checking for updates ... done. Installing IDE in quick mode; for full customization you can rerun this command with \"--expert\" argument or edit this config later via \"projector config edit\" command. 1. Idea_Community 2. Idea_Ultimate 3. PyCharm_Community 4. PyCharm_Professional 5. CLion 6. GoLand 7. DataGrip 8. PhpStorm 9. WebStorm 10. RubyMine 11. Rider Choose IDE type or 0 to exit: [0-11]: 4 Do you want to select from Projector-tested IDE only? [y/N]y 1. PyCharm Professional 2019.3.4 2. PyCharm Professional 2020.2 3. PyCharm Professional 2020.3.3 Choose IDE number to install or 0 to exit: [0-3]: 3 Installing PyCharm Professional 2020.3.3 Downloading pycharm-professional-2020.3.3.tar.gz [##------------------------------------------------] 4% 00:04:15 Unpacking pycharm-professional-2020.3.3.tar.gz [##################################################] 100% Configuration name: PyCharm Checking for updates ... done. To access IDE, open in browser http://localhost:9999/ http://127.0.0.1:9999/ http://10.106.200.224:9999/ To see Projector logs in realtime run tail -f \"/root/.projector/configs/PyCharm/projector.log\" Exit IDE or press Ctrl+C to stop Projector. # start IDE user@machine:~# projector run 其中我遇到的坑主要是需要升级 pip3（\u003e= 19）和 Python（\u003e= 3.6），解决方案见下一章。 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:2:0","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"0x02 故障排除 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:3:0","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"更新完 pip3 后得到 SyntaxError: invalid syntax 首先按照链接 3 的教程更新 pip3 到最新版本： # 检查现有 pip3 版本 pip3 --version # 如果版本小于 19 就使用如下命令更新到最新版本 python3 -m pip install -U pip 再接着执行任何 pip3 install 都会得到如下错误： sys.stderr.write(f\"ERROR: {exc}\") ^ SyntaxError: invalid syntax 这个问题出现的原因是远程主机 Python = 3.5，但 pip 默认更新到最新的 pip 21.0 仅支持 Python 3.6+1。我的选择是将 pip 更新到最后支持 Python 3.5 的那一版： curl -fsSL -o- https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3.5 这就为接下来的问题埋下伏笔。现在回想此时正确的做法应是直接更新 Python。 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:3:1","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"尝试用 pip3 安装 Projector 时遇到 Error 在按照链接 3 的教程安装完一系列的依赖后，就可以正式安装 Projector： pip3 install projector-installer --user ERROR: Could not find a version that satisfies the requirement projector-installer ERROR: No matching distribution found for projector-installer 如果遇到以上错误，说明需要升级 Python 版本2。教程见3，摘录如下： sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt-get install python3.8 sudo apt install python3.8-distutils # 更新软链接 sudo rm /usr/bin/python3 sudo ln -s python3.8 /usr/bin/python3 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:3:2","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"projector 命令无效 这个问题在链接 3 的 FAQ 部分已经进行了说明4。是出在 projector 的安装路径 ~/.local/bin 没有加入到环境变量 $PATH 中，直接的 workaround 是使用完整路径启动 projector： ~/.local/bin/projector 不过一劳永逸的方法将添加环境变量 $PATH 的命令写入到 ~/.profile： echo \"export PATH=${PATH}:~/.local/bin\" \u003e\u003e ~/.profile . ~/.profile ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:3:3","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"projector run 尝试启动 IDE 后很快出现报错日志 在初次使用 projector install 完成 IDE 安装后会自动启动 IDE，使用完毕后使用 Ctrl + c 退出。之后想再次启动已经安装好的 IDE 就需要使用 projector run 命令，可能遇到在输出完 IDE 的访问链接后立刻打印报错日志的情况： Checking for updates ... done. To access IDE, open in browser http://localhost:9999/ http://127.0.0.1:9999/ http://10.106.200.224:9999/ To see Projector logs in realtime run tail -f \"/root/.projector/configs/PyCharm/projector.log\" Exit IDE or press Ctrl+C to stop Projector. --------------------- Projector log session start. Installer version: 1.1.1 Run config: PyCharm - 2021-04-07 08:02:35.367158 OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release. [DEBUG] :: IdeState :: Starting attempts to attach IJ injector agent [DEBUG] :: IdeState :: Starting attempts to initialize IDEA: fix AA and disable smooth scrolling (at start) [INFO] :: ProjectorServer :: ProjectorServer is starting on host 0.0.0.0/0.0.0.0 and port 9999 [DEBUG] :: IdeState :: Starting attempts to Getting IDE colors [INFO] :: ProjectorServer :: WebSocket SSL is disabled [INFO] :: ProjectorServer :: Server started on host 0.0.0.0/0.0.0.0 and port 9999 [DEBUG] :: ProjectorServer :: Daemon thread starts [DEBUG] :: IdeState :: Starting attempts to search for editors IDE has not been initialized yet [DEBUG] :: ProjectorServer :: Daemon thread finishes 这个问题可能是之前的 IDE 没有成功退出导致的5（虽然 log 看起来并非如此），杀掉旧进程就可以了： root@machine:~# ps aux | grep -i pycharm root 966 36.5 0.2 8513048 286408 pts/0 Sl 07:38 9:51 /root/.projector/apps/pycharm-2020.3.3/jbr/bin/java -classpath /r root 2102 0.0 0.0 13216 1064 pts/0 S+ 08:05 0:00 grep --color=auto -i pycharm root@machine:~# kill 966 root@machine:~# ps aux | grep -i pycharm root 2113 0.0 0.0 13216 1044 pts/0 S+ 08:06 0:00 grep --color=auto -i pycharm root@machine:~# projector run ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:3:4","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"0x03 存在的问题 此处仅列举我在实际体验中觉得很糟心的地方，其它问题可以在链接 2 的 Known problems6 部分查看。 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:4:0","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"快捷键冲突和剪贴板共享 Projector 的服务端是安装在远程 Linux 环境中，然后通过本地浏览器或下载链接 5 的客户端使用（这里需要提一句的是 JetBrains 的 IDE 插件市场中也上架了 Projector7，但这个是把本机 IDE 当服务端来用的）。 当通过浏览器访问 Projector 时，IDE 的快捷键会与浏览器本身的快捷键冲突，例如选择代码块的快捷键 Ctrl + w8在 Chromium/Firefox/Safari 中是关闭当前标签页。所以为了使用快捷键还有复制粘贴功能，最好还是下载独立的 Projector 客户端。 ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:4:1","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"启用自签证书的 HTTPS 本文初次写成于 2021 年 3 月，但当 4 月我在另一台机器上部署完 Projector 后发现即使用 Projector 客户端去连也不能将其中的文本复制粘贴到其它程序中。在 JetBrains 的 bug 跟踪系统 YouTrack 上有人9解释是新版本的服务端后只有在 localhost 部署或启用 HTTPS 后才能跨程序复制粘贴，同时给出了对于 不完整剪贴板同步实现过程的官方文档。 就个人+内网使用来说，自签 HTTPS 证书是比较简单的方式。此处给出自签证书的启用方法，至于使用可信任证书颁发机构给域名颁发的证书，可以参考链接 3 自述文件的 FAQ 部分10。 在命令行中交互式启动自签 HTTPS 证书： # 所有可用命令 projector config (--help) # 列出所有配置的名称 projector config list # 展示选定配置的详情 projector config show # 这里的信息要比 ~/.projector/configs/PyCharm/config.ini 更详细， # 也有一个布尔的 \"Projector uses secure config (https/wss)= 0\" # 交互式修改配置 projector config edit # 只需给 Use secure connection? 一个 y 的回答 修改完毕后再 projector run 就能看到终端中提示要从 ~/.projector/ssl/ca.crt 安装证书，有意思的是这个证书下载下来是 0KB，无法安装。我最后是通过直接在 Chrome 访问 https://\u003cprojector-server-address\u003e:\u003cprojector-port\u003e -\u003e 导出证书 -\u003e 文件管理器安装。 https://stackoverflow.com/questions/65869296/installing-pip-is-not-working-in-python-3-6 ↩︎ https://youtrack.jetbrains.com/issue/PRJ-302 ↩︎ https://stackoverflow.com/questions/58591889/how-i-can-upgrade-my-ubuntu-python3-7-to-python3-8-latest-version ↩︎ https://github.com/JetBrains/projector-installer#projector-command-is-unavailable ↩︎ https://stackoverflow.com/questions/61236544/clion-pycharm-phpstorm-intellij-wont-start-says-ide-has-not-been-initialized/61237140#61237140 ↩︎ https://jetbrains.github.io/projector-client/mkdocs/latest/ij_user_guide/jetbrains/#known-problems ↩︎ https://plugins.jetbrains.com/plugin/16015-projector ↩︎ https://www.jetbrains.com/help/idea/working-with-source-code.html#editor_code_selection ↩︎ https://youtrack.jetbrains.com/issue/PRJ-426#focus=Comments-27-4816576.0-0 ↩︎ https://github.com/JetBrains/projector-installer#secure-connection ↩︎ ","date":"2021-07-06","objectID":"/jetbrains-projector-first-experiences/:4:2","tags":null,"title":"JetBrains Projector 使用初体验","uri":"/jetbrains-projector-first-experiences/"},{"categories":null,"content":"影响因子 Impact Factor 是美国科学情报研究所（ISI）的 期刊引证报告（JCR）中的一项数据。指的是某一期刊的文章在特定年份或时期被引用的频率，是衡量 学术期刊 影响力的一个重要指标。由美国科学情报研究所创始人尤金·加菲得在 1960 年代创立，其后为 文献计量学 的发展带来了一系列重大革新。 自 1975 年以来，每年定期发布于《期刊引证报告》（JCR）。 影响指数即某期刊前两年（S, T）发表的论文在统计当年（U）的被引用总次数 X（前两年总被引次数）除以该期刊在前两年（S, T）内发表的论文总数 Y（前两年总发文量）。这是一个国际上通行的期刊评价指标。公式为： $$I F_{U}=\\frac{X_{(S, T)}}{Y_{(S, T)}}$$ SCI 科学引文索引 Science Citation Index 是由美国 科学资讯研究所（Institute for Scientific Information，简称ISI）于 1960 年上线投入使用的一部期刊文献检索工具（点我使用），其出版形式包括印刷版期刊和光盘版及联机数据库。科学引文索引由 科睿唯安 公司（Clarivate Analytics）运营。 收录范围：自然科学的基础研究领域 ","date":"2020-11-11","objectID":"/what-is-sci/:0:0","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"Web of Science™ 科睿唯安当前涉及的领域包括：科学与学术研究、生命科学与制药、专利与研发创新、产业法规与标准、网域名称管理、商标检索与保护。Web of Science™ 是其在 科学与学术研究 领域提供的「最受信任的、独立于出版商的全球引文数据库（the world’s most trusted publisher-independent global citation database）」；而 Journal Citation Reports 是其在 科学与学术研究 领域 依托于 Web of Science 的在研究分析与评估方面的产品。它早先的名称是 Web of Knowledge Web of Science™ 是一个基于 Web 而构建的动态的数字研究环境，通过强大的检索技术和基于内容的连接能力，将高质量的信息资源、独特的信息分析工具和专业的信息管理软件无缝地整合在一起，兼具知识的检索、提取、分析、评价、管理与发表等多项功能1。在内容上， 以 Web of Science™ 核心合集（著名的三大引文索引 Science Citation Index Expanded®, Social Science Citation Index®, Arts \u0026 Humanities Citation Index®）为核心 ，凭藉独特的引文检索机制和强大的交叉检索功能，有效地整合了： 学术期刊（Web of Science™ 核心合集） 技术专利（Derwent Innovations Index） 化学反应（Chemistry） 研究基金（eSearch） Internet资源（Current Web Contents） 学术分析与评价工具（Essential Science Indicators） 学术社区（HighlyCited.com） 及其它重要的学术信息资源，提供了自然科学、工程技术、生物医学、社会科学、艺术与人文等多个领域中高质量、可信赖的学术信息。Web of Science™ 平台上所有数据库中的信息都是经过精心挑选的，它只收录那些对研究者有用的出版物、网站内容和其它学术资源。这些学术信息是由许多不同的媒介以不同的格式提供的。这些媒介形式包括期刊（印刷版或电子版）、书籍和会议录、网站内容，以及 ISI 外部的数据库。 ","date":"2020-11-11","objectID":"/what-is-sci/:1:0","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"Web of Science Core Collection™ 核心合辑2 遴选标准：zh-cn、zh-tw 重点摘录：普通期刊 →（编辑品质评估成功）→ ESCI →（编辑影响力评估成功）→ SCIE/SSCI/AHCI，其中箭头也可反向——即SCIE也可掉回ESCI甚至普通期刊 拥有来自全球 18,000 多种高影响力的学术期刊、180,000 多种会议论文、以及 80,000 多种学术书籍的多学科研究资料。通过百年以上的丰富文献资源以及超过十亿的引文网络，您可以在任何领域放心地检索并发现完整的引文网络。 Science Citation Index Expanded™ (SCIE) 涵盖 178 个学科的 9300 多种主流期刊。— 1900 年至今。 Social Sciences Citation Index™ (SSCI) 涵盖 58 个社会科学学科的 3,400 多种期刊，以及从 3,500 种世界顶尖期刊中筛选的内容。— 1900 年至今。 Arts \u0026 Humanities Citation Index™ (A\u0026HCI) 超过 1,800 种艺术与人文领域的期刊，以及从 250 多种自然科学和社会科学期刊中筛选的内容。— 1975 年至今。 Emerging Sources Citation Index™ (ESCI) 包含了 5,000 多种期刊的 ESCI，旨在捕捉高影响力文献之外的自然科学、社会科学和人文学科领域的趋势与发展。科睿唯安编辑团队所遴选并评审的期刊通常会在全球得到相关领域的意见领袖、基金资助和评估机构的重视。 Book Citation Index™ (BKCI) 索引了超过 80,000 种编辑精选的图书，且每年增加 10,000 种新书。— 2005 年至今。 Conference Proceedings Citation Index (CPCI) 该多学科索引能让人们以最快的方式从 180,000 多种会议论文集中获得最前沿、有影响力的研究。— 1990 年至今。 ","date":"2020-11-11","objectID":"/what-is-sci/:1:1","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"区域性资料库3 Chinese Science Citation Database™（中国科学引文资料库） 科睿唯安与中国科学院合作，将中国科学引文资料库（Chinese Science Citation Database™）嵌入到 Web of Science™ 平台中，让全世界更多的科学研究人员瞭解中国的科学研究发展及动态。作为 Web of Science™ 平台中首个非英文产品，该资料库收录了约 1,100 种中国出版的科学与工程核心期刊，共有近 400 万条论文记录，1,700 万条引文记录。 Russian Science Citation Index™ KCI Korean Journal Database™ SciELO Citation Index™ ","date":"2020-11-11","objectID":"/what-is-sci/:1:2","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"Journal Citation Reports™ 期刊引证报告4 全球每年有上千万的学术研究著作发表，其中的文献引用更是巨量。引文所串起的连结都具有意义，因为这是研究学者悉心阐述其研究发现的轨迹，而每一本他们所引用与选择的期刊也代表著他们重视该期刊为自己的研究发现所带来的价值。Journal Citation Reports™ (JCR) 汇总了 Web of Science™ 核心合辑期刊的引文数据，呈现了庞大的学术网络彼此之间的关联与研究脉络。 最新版的 JCR 显著加强了对 Journal Impact Factor™ (JIF) 和其他指标的透明度，增加了论文层面的分析和解读，为用户全面瞭解期刊表现，提供了新的分析角度和更加丰富而详尽的资讯。这些新的分析角度更好地利用了引文资料库中的资料和指标，能协助研究人员、出版商、期刊编辑、图书馆员和基金资助者进一步地瞭解期刊对各种用户的核心价值。 每本被 JCR 收录的期刊均符合 Web of Science 核心合辑的期刊遴选标准，JCR仅显示被 Science Citation Index Expanded™ (SCIE) 和 Social Sciences Citation Index™ (SSCI) 索引的期刊，以便您可以快速找到自然科学和社会科学领域最具影响力的期刊清单。 ","date":"2020-11-11","objectID":"/what-is-sci/:2:0","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"指标5 期刊引证报告透过量化引用文献的统计资讯，于每年度发表下列评比指标并予以排名： 年度影响因子（Impact Factor）：透过该期刊“前两年”所发表文章总数，与“前两年”的文章在“该年度”被引用的总次数计算而得出。当影响因子的数字越高，代表此期刊的文章被引用次数越多，即此期刊在学术界的影响力越大。一般而言期刊的影响因子越高，则代表此期刊的学术品质越佳。值得注意的是，影响因子虽然是期刊本身评价的指标，但不能作为该期刊中单篇论文影响力的依据、或是论文作者的评价。 5年影响因子（5-Year Impact Factor）：透过该期刊于“前五年”所发表文章总数，与“前五年”的文章在“该年度”被引用的总次数计算而得出。此指标类似于年度影响因子，但计算时间较长，可以代表该期刊在长时间下的影响能力。 立即指数（Immediacy Index）：为该期刊当年度所出版文章的平均被引用次数。此指标可代表该期刊在当年度影响力的大小。 被引半衰期（Cited Half-Life）：该期刊的总被引用次数衰退一半所需要的年数（此数据只有在总被引次数大于100时提供）。此指标可代表该期刊文章影响力衰退的速度，其数值越大则代表影响力持续较久，数值越小则代表影响力较小。通常社会科学领域期刊的被引用半衰期相较来的长。 总被引用次数（Total Cites）：为该期刊自从被收录进期刊引证报告后的总被引用次数。 文章总数（Current Articles）：为该期刊自从被收录进期刊引证报告后的文章总数。 Engineering Index 工程索引 是世界著名的检索工具，由美国工程信息公司编辑出版发行，该公司始建于 1884 年，是世界上最大的工程信息提供者之一，早期出版印刷版、缩微版等信息产品，1969 年开始提供 EI Compendex 数据库服务。EI Compendex：对应的印刷版检索刊为《工程索引》，是最常用的文摘数据库之一，侧重于工程技术领域的文献的报道。1992 年开始收录中国期刊，1998 年清华大学建立了 EI 中国镜像站。 EI数据来源于 3 千种工程类期刊以及 9 万多种会议录，每周更新6。目前主要有三个版本： Ei Compendex 光盘数据库 Ei Compendex Web数据库 Engineering Village 2 工程信息村 其中 Ei Village 2 包括： Compendex Engineering Index Backfile 工程索引回放文件 Inspec Inspec Archive NTIS 国家医学研究所 Referex Engineering ENGnetBASE Patents from USPTO and esp@cenet GlobalSpec Scirus EEVL LexisNexis News 参考文献 Impact Factor、引用次數與學術評鑑相關問題懶人包 WoS 與 WOK、JCR、ESI 之間的關係？： SCI 與 SCIE 的區別：1. SCI为光盘形式，现已停止发行发布；后者为网页服务 2. 两者评选标准相同 如何得知期刊是否收錄於 Web of Science 資料庫？：WOS’s Master Journal List 如何得知某期刊是否被EI收錄？：Ei Village(Source title) or 下载（定期更新的）Ei Compendex 收录清单 如何查詢期刊之Impact Factor 科睿唯安网站上关于 Web of Science™ 核心合集的遴选标准 ↩︎ 科睿唯安网站上关于 Web of Science™ 核心合辑的介绍 ↩︎ 科睿唯安网站上关于 Web of Science™ 核心合辑中区域性资料库的介绍 ↩︎ 科睿唯安网站上关于期刊引证报告的介绍 ↩︎ 维基百科条目「期刊引证报告」中关于指标的解释 ↩︎ 第三方网站「EI学术」上对EI的简介 ↩︎ ","date":"2020-11-11","objectID":"/what-is-sci/:2:1","tags":null,"title":"什么是 SCI","uri":"/what-is-sci/"},{"categories":null,"content":"0x00 前言 https://www.ssh.com/ssh/ 上的文档写得很详细但有些散碎，本文对配置 OpenSSH 公钥认证的环节进行了整理。 如果你还不了解什么是公钥认证的话，可以看： https://www.ssh.com/ssh/public-key-authentication ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:1:0","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"公私钥长什么样？ # https://www.ssh.com/ssh/key/#what-do-ssh-keys-look-like:~:text=An%20authorized%20key%20can%20look%20like%20this%3A # 公钥 a.k.a. public key a.k.a. authorized key # 尾部是生成密钥对的 \u003c用户名\u003e@\u003c主机名\u003e ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+Mh3U/3We4VYtV1QmWUFIzFLTUeegl1Ao5/QGtCRGAZn8bxX9KlCrrWISIjSYAwCajIEGSPEZwPNMBoK8XD8Q= ylo@klar # 私钥 a.k.a. private key a.k.a. identity key -----BEGIN EC PRIVATE KEY----- MHcCAQEEIJWbvSW7h50HPwG+bWR3DXgQ6YhOxYbe0ifr1rRUvsUuoAoGCCqGSM49 AwEHoUQDQgAE34yHdT/dZ7hVi1XVCZZQUjMUtNR56CXUCjn9Aa0JEYBmfxvFf0qU KutYhIiNJgDAJqMgQZI8RnA80wGgrxcPxA== -----END EC PRIVATE KEY----- 接下来本文将以 Windows 作为本机系统、Ubuntu 作为远程主机系统演示公钥认证的配置过程。 ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:1:1","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"0x01 本机使用 ssh-keygen 生成公私钥对 # PowerShell ssh-keygen.exe # 默认输出到 C:\\Users\\$ENV:USERNAME\\.ssh\\ 下的 id_rsa # WSL ssh-keygen # 默认输出到 ~/.ssh/ 下的 id_rsa 密码（passphrase）对私钥的加密效果使得第三方即使获得私钥也无法完成认证过程。 需要说明的是，在手动指定密钥对的保存路径时，如果只写文件名，默认是放在启动 ssh-keygen 时所在的工作目录中。 ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:2:0","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"0x02 将公钥内容写入远程主机的 ~/.ssh/authorized_keys 文件中 authorized_keys 文件保存允许通过公钥授权来经 SSH 登录服务器者的公钥，每行保存一个，空行或是井号会被忽略。 它通常位于 ~/.ssh/authorized_keys（许多 OpenSSH 的版本也会使用 ~/ssh/authorized_keys2），而对一些使用客制化 OpenSSH 构建的组织来说，这个默认路径可能有变化。 Configuring authorized_keys for OpenSSH ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:3:0","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"方法 1：使用 ssh-copy-id ssh-copy-id 用于在远程主机上添加公钥，它的操作逻辑为： 远程服主机的 ~/.ssh 路径是否存在？创建：下一步 远程主机的 ~/.ssh/authorized_keys 文件是否存在？创建：下一步 （当没有使用 -f(orce) 时）远程主机的 authorized_keys 文件是否已包含本次要配置的公钥？跳过：添加，下一步 远程主机的 authorized_keys 文件权限是否仅有当前用户可写入？不变：修改 其可选参数为： Name Description -f Don’t check if the key is already configured as an authorized key on the server. Just add it. This can result in multiple copies of the key in authorized_keys files. -i Specifies the identity file that is to be copied (default is ~/.ssh/id_rsa). If this option is not provided, this adds all keys listed by ssh-add -L. Note: it can be multiple keys and adding extra authorized keys can easily happen accidentally! If ssh-add -L returns no keys, then the most recently modified key matching ~/.ssh/id*.pub, excluding those matching ~/.ssh/*-cert.pub, will be used. -n Just print the key(s) that would be installed, without actually installing them. -p Connect to the specifed SSH port on the server, instead of the default port 22. -h help 关于 ssh-copy-id 的更多介绍见：ssh-copy-id for copying SSH keys to servers，也可直接跳转到 Trouble shooting 章节 废话写完了，实际使用的命令如下： ssh-copy-id -i /mnt/c/Users/$ENV:USERNAME/.ssh/keypair/keyToGPUServer amax@192.168.50.50 可以注意到，已成功添加了一个公钥，但并不能按照提示所说直接使用 public key authentication，后续会在 # 0x03 的 方法 2 中进行解释。 ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:3:1","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"方法 2：手动拷贝 手动拷贝本机公钥内容到远程主机的 ~/.ssh/authorized_keys 文件有很多方法，此处以 scp 复制公钥到远程主机为例： # 先复制本机公钥到远程主机的 ~ 目录 scp C:\\Users\\$ENV:USERNAME\\keyToGPUServer.pub amax@192.168.50.50:~ 不过我这里的私钥权限太宽需要修改： # 当前用户只读 chmod 400 .ssh/keypair/keyToGPUServer # 当前用户读写 chmod 600 .ssh/keypair/keyToGPUServer 传输完成后登入远程主机，将公钥内容写入到 ~/.ssh/authorized_keys： # 此时仍然需要以账户密码登录 ssh amax@192.168.50.50 # 添加到文件尾 cat keyToGPUServer.pub \u003e\u003e ~/.ssh/authorized_keys ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:3:2","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"0x03 配置本机的私钥存储 本地主机的 ssh 程序可通过： 命令行（指 ssh-agent 工具） （用户）配置文件 ~/.ssh/config （全局）配置文件 /etc/ssh/ssh_config 来获得配置信息。三个位置的优先级由高到低，且在每个位置仅使用首个匹配成功的条目。 https://www.ssh.com/ssh/config ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:4:0","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"方法 1：向 ssh-agent 添加私钥 ssh-agent 用于保存和管理用户的私钥和私钥密码，借助它我们可以实现单点登录（Single Sign-On, SSO）。 在大多 Linux 系统中 ssh-agent 都已被自动配置且在登入时已启动。 https://www.ssh.com/ssh/agent 使用如下命令向 ssh-agent 添加私钥： # 检查是否启动 echo $SSH_AGENT_SOCK # 手动启动 eval `ssh-agent` # 显示 ssh-agent 已安装私钥 ssh-add -l # 从 ssh-agent 移除指定名称私钥（不删除密钥文件） ssh-add -d keyToGPUServer # 从 ssh-agent 移除所有已添加私钥（不删除密钥文件） ssh-add -D # 从默认位置添加默认名称的私钥 # ~/.ssh/id_rsa, .ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519, and ~/.ssh/identity ssh-add # 手动指定私钥位置和名称 ssh-add keypair/keyToGPUServer 测试： # 成功认证 ssh amax@192.168.50.50 amax@admin:~$ ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:4:1","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"方法 2：将私钥信息写入 ~/.ssh/config 文件 Windows 下的对应文件是在 C:\\Users\\$ENV:USERNAME\\.ssh\\config： # https://www.ssh.com/ssh/config/#configuring-public-key-authentication Host GPU HostName 192.168.50.50 User amax IdentityFile C:\\Users\\$ENV:USERNAME\\.ssh\\keypair\\keyToGPUServer IdentitiesOnly yes Port 22 ServerAliveInterval 60 这里的 Host 名称一定要起一个好记的，因为在之后使用 ssh 进行公钥认证时匹配的就是这里的 Host 名称而不再是 \u003cusername\u003e@\u003cip-address\u003e，本文第二张图下方没有成功通过公钥认证就是这个原因。 测试： # 如果前面还通过 ssh-agent 添加了相同的密钥，要先删除掉。因为找密钥的时候它的优先级更高 ssh-add -d keyToGPUServer # 只能通过 Host 名称才不要密码 ssh GPU amax@admin:~$ # 如果是通过用户名主机名去登录就还得输入密码 ssh amax@192.168.50.50 amax@192.168.50.50's password: ","date":"2020-10-05","objectID":"/use-public-key-authentication-in-openssh/:4:2","tags":null,"title":"配置 OpenSSH 的公钥认证","uri":"/use-public-key-authentication-in-openssh/"},{"categories":null,"content":"记录了个人使用 Colab 的一些感受和在它上面 debug 的困难","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"Colaboratory（简称 Colab）是 Google 推出的免费、在线、具有 GPU 的 JupyterLab 环境，它的底层是一个虚拟的 Linux 系统，所以你在里面执行 Linux 命令也是没有问题的。 我的本科毕业设计是做的深度学习相关的内容，但自己笔记本电脑里的 GTX 950M（2G）显卡一跑代码就爆显存，所以不夸张地说我是全靠 Colab 才顺利毕业。 扯远了，本文主要是测试一下 Colab 调试代码的方法，结论就是对于结构比较复杂的代码 Colab 并不能很好地完成调试。 ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:0:0","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"0x00 一些 Colab 使用心得 ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:1:0","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"Colab 的优点 环境配置简单。深度学习相关的很多软件包都是预装好的，省事省时； 网络环境通畅。数据中心带宽大，下载数据集嗖嗖的； 下载预训练模型的速度 GPU 够用。原来白天能分到 Telsa T4，现在白天也只有 Tesla K80 了，但起码 11.4GB 的显存是实打实的； 在 code cell 中使用 !nvidia-smi 命令查看 GPU 信息 支持 bash 命令。bash 命令想要在 code cell 里执行只需每行前加 ! 就可以了； Colab 环境中 /bin 目录的内容 支持在线修改。对于大型工程，其代码必然分散在项目的各个文件夹里，以前想修改文件内容需要下载到本地修改然后再上传，十分繁琐。2019 年 10 月 4 日 Colab 支持了从文件树双击打开、修改文件。 @GoogleColab 的推文截图 更多 Colab 特性可以查看 Google 的说明文档 ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:1:1","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"Colab 的缺点 资源自动回收。据说是运行 12 小时后自动回收所有资源（另外实际经验是如果浏览器与 Colab 的连接不幸中断数小时也会触发回收），GPU 需要重新申请是其次，重要的是保存运行结果的临时硬盘空间也会被回收掉。所以可以考虑把 Google Drive 挂载上去然后结果直接存在里边，这就会带来下面第二个缺点； Colab 临时硬盘有 359 GB 与 Google Drive 不能无缝整合。同一份代码，直接在 Colab 临时硬盘空间运行与克隆到被挂载到 Colab 的 Google Drive 运行有明显可感的降速，瓶颈可能是 Google Drive 本身存储介质的 I/O 性能； Colab 临时硬盘与挂载的 Google Drive 在 Colab 中读写速度对比 再者，即使 I/O 跟得上，Google Drive 提供的 15G 免费存储空间对于大数据集来说远远不够； 不易使用图形化监测工具如 Tensorboard / Visdom 。没有官方解决方案，必须依靠奇技淫巧——换用 TensorBoardX、给 Visdom 套上反向代理。 ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:1:2","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"0x01 Jupyter 101：magic commands 所谓 magic commands魔法命令 就是在 Jupyter 代码块中以 % 或者 %% 作为行首的特殊命令。而 bash 命令需要使用 ! 作为行首。 % 开头——行命令。只对命令所在的行有效 %% 开头——单元命令。必须出现在单元的第一行，对整个单元的代码进行处理 在代码块中输入 %lsmagic 然后执行会输出关于各个命令的说明，在魔法命令之后紧跟 ? 可以查看该命令的详细说明。 常用魔法命令 %cd 进入目录命令（改变本代码块的 当前工作目录current working directory 并在之后的代码块中保持，而 !cd 仅对当前行有效） %load_ext 根据模块名载入模块（可以用于在本代码块的输出中载入 tensorboardX） %magic 显示所有魔法命令的详细文档 %whos 打印所有变量及其类型和值 %xdel 删除指定变量 %set_env \u003cvar\u003e \u003cval\u003e 设定环境变量的值 %psource 打印对象的源代码 %pinfo 打印对象的详细信息 %pfile 打印对象的定义 %%latex 以 $LaTeX$ 格式渲染 cell %run script.py 在ipython中执行一个外部的脚本文件 %%python3 以 Python 3 执行 cell（Python 2 同理） %hist 查询输入的历史 %writefile [-a] filename 把 cell 的内容写/追加入文件（别名 file） %env 显示所有/特定/修改系统环境变量 %reset 清空 namespace %load 加载代码到前端（可以是链接） http://nbviewer.jupyter.org/github/supergis/git_notebook/blob/master/pystart/jupyter_magics.ipynb ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:2:0","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"0x02 使用 ipdb 进行调试 Quote 常规的 Python 交互式 debug 工具是 pdb，它可以让我们 单步Step Trough 调试；IPython 改进版的 pdb 被称为 ipdb 。 https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/01.06-Errors-and-Debugging.ipynb 在 IPython 内核环境中最方便的调用 ipdb 的方法是使用魔法命令 %debug。如果是在遇到异常之后立刻运行 %debug 则会自动在异常位置打开一个交互式调试提示符Interactive Debugging Prompt，该 ipdb 调试提示符可以实现检查当前栈、变量或是使用 Python 命令。以下是简单示范： Jupyter code cell def func1(a, b): return a / b def func2(x): a = x b = x - 1 return func1(a, b) 当调用 func2(1) 时，将抛出异常： Jupyter code cell output Traceback (most recent call last): File \"\u003cipython-input-4-b2e110f6fc8f\u003e\", line 1, in \u003cmodule\u003e func2(1) 1 frames File \"\u003cipython-input-1-d849e34d61fb\u003e\", line 7, in func2 return func1(a, b) File \"\u003cipython-input-1-d849e34d61fb\u003e\", line 2, in func1 return a / b ZeroDivisionError: division by zero 使用 ipdb 调试： Jupyter code cell output \u003e \u003cipython-input-1-d849e34d61fb\u003e(2)func1() 1 def func1(a, b): ----\u003e 2 return a / b 3 ipdb\u003e up \u003e \u003cipython-input-1-d849e34d61fb\u003e(7)func2() 5 a = x 6 b = x - 1 ----\u003e 7 return func1(a, b) ipdb\u003e print(x) 1 ipdb\u003e up \u003e \u003cipython-input-6-b2e110f6fc8f\u003e(1)\u003cmodule\u003e() ----\u003e 1 func2(1) ipdb\u003e down \u003e \u003cipython-input-1-d849e34d61fb\u003e(7)func2() 5 a = x 6 b = x - 1 ----\u003e 7 return func1(a, b) ipdb\u003e quit 常用 ipdb 命令 Command Description list 显示当前行的上下5行 up 步退 down 步进 n(ext) 当前文件中下一步 Go to the next step of the program s(tep) 下一步，如果有就进入子函数（Step into a subroutine） r(eturn) 退出子函数（Return out of a subroutine） \u003center\u003e 重复前条命令 p(rint) 打印指定变量值 c(ontinue) 退出调试器，继续运行程序 q(uit) 退出调试器，终止程序 h(elp) 显示所有命令/指定命令的帮助 b LINE 在指定行设置断点 https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/01.06-Errors-and-Debugging.ipynb#scrollTo=MNC9gzvgplsp 上述例子调用 ipdb 发生在产生异常之后，目的是为了修改程序中的错误；如果我们的程序运行良好，想通过调试观察函数调用，就不能再用简单的行魔法命令 %debug 而是为其加上参数甚至变成单元命令。 %pdb 与 %debug 用法的不同（总结自 %debug?） 如果想在每次 产生异常后 让 IPython 自动进入 交互式调试提示符—— %pdb on 或者 %pdb 1 如果想在每次产生异常后Post-mortem Mode 手动进入 交互式调试提示符——不加参数地使用 %debug 如果想无论有没有异常都激活交互式调试提示符——带参数地使用 %debug ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:3:0","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"如何带参数地使用 %debug 失败的尝试 %debug –breakpoint \u003cFILE\u003e:\u003cLINE\u003e 结果：无法调起 ipdb 交互式调试提示符。只会显示一个不响应 ipdb 命令的输入框。 Jupyter code cell and output %%debug –breakpoint \u003cFILE\u003e:\u003cLINE\u003e 结果：无法运行到标记的断点。Python 处理基本调试器函数的 bdb 模块出现异常，未搜到解决方法。尝试不加 -b 参数异常不变。 Jupyter code cell and output 可行方式 手动在程序中设置断点。但调试过程复杂低效。首先要先在 Jupyter 环境安装 ipdb： Jupyter code cell # 安装 ipdb # P.S. 按 https://stackoverflow.com/a/32409822/8178171 的讨论也可以使用 pdb，那么下面加断点时也要改成 pdb !pip3 install ipdb 然后在代码中加入断点： Jupyter code cell or *.py # 源程序想设置断点处：添加此行 import ipdb; ipdb.set_trace() 实际效果如下： Jupyter code cell and output ","date":"2019-10-16","objectID":"/can-we-really-debug-in-google-colab/:3:1","tags":null,"title":"在 Google Colab 上 Debug 的正确方式","uri":"/can-we-really-debug-in-google-colab/"},{"categories":null,"content":"0x00 相关链接 使用 Pytorch 框架下实现的 Faster R-CNN：jwyang/faster-rcnn.pytorch 主要参考文章：使用 colab 訓練 faster-rcnn ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:1:0","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"0x01 操作步骤 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:2:0","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"克隆仓库 使用 -b 参数指定 分支branch 为 pytorch-1.0，否则后续编译出错 !git clone -b pytorch-1.0 https://github.com/jwyang/faster-rcnn.pytorch.git ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:2:1","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"下载预训练模型、数据集 # 进入下载好代码的主目录 import os os.chdir('faster-rcnn.pytorch') # 下载预训练模型 !ls !mkdir data os.chdir('data') !mkdir pretrained_model os.chdir('pretrained_model') # 下载 res101 !wget https://filebox.ece.vt.edu/~jw2yang/faster-rcnn/pretrained-base-models/resnet101_caffe.pth # 下载 vgg16 !wget https://filebox.ece.vt.edu/~jw2yang/faster-rcnn/pretrained-base-models/vgg16_caffe.pth # 下载数据集 os.chdir('../') #返回上一級目录即data/下 !wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar !wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar !wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar # 解压缩 !tar xvf VOCtrainval_06-Nov-2007.tar !tar xvf VOCtest_06-Nov-2007.tar !tar xvf VOCdevkit_08-Jun-2007.tar # 解压后的文件夹名称需要修改否则网络训练过程中会找不到路径。报错见问题 2 !mv VOCdevkit VOCdevkit2007 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:2:2","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"编译 回到上一级路径，然后进入 lib 编译 os.chdir('../lib') !python setup.py build develop ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:2:3","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"训练 首先修改编译好文件 faster-rcnn.pytorch/lib/roi_data_layer/minibatch.py 。原因见问题 1。 !sed -i 's/from scipy.misc import imread/from matplotlib.pyplot import imread/g' roi_data_layer/minibatch.py 给定超参数开始训练： !cd /content/faster-rcnn.pytorch \u0026\u0026 CUDA_VISIBLE_DEVICES=0 python trainval\\_net.py \\ --dataset pascal_voc \\ --net res101 \\ --bs 4 \\ --nw 0 \\ --lr 0.004 \\ --lr_decay_step 8 \\ --epochs 10 \\ --cuda ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:2:4","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"0x02 已解决问题 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:3:0","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"问题 1：无法导入 imread 开始训练时文件 faster-rcnn.pytorch/lib/roi_data_layer/minibatch.py 无法从 scipy.misc 导入 imread 。 Traceback (most recent call last): File \"trainval_net.py\", line 28, in \u003cmodule\u003e from roi_data_layer.roibatchLoader import roibatchLoader File \"/content/faster-rcnn.pytorch/lib/roi_data_layer/roibatchLoader.py\", line 14, in \u003cmodule\u003e from roi_data_layer.minibatch import get_minibatch, get_minibatch File \"/content/faster-rcnn.pytorch/lib/roi_data_layer/minibatch.py\", line 15, in \u003cmodule\u003e from scipy.misc import imread ImportError: cannot import name 'imread' 参考 https://stackoverflow.com/a/49586881 改为从 matplotlib.pyplot 导入。 imread is deprecated in SciPy 1.0.0, and will be removed in 1.2.0. Use imageio.imread instead. https://docs.scipy.org/doc/scipy-1.2.1/reference/generated/scipy.misc.imread.html 所以也可以 !pip install scipy==1.0.0 ，印象中好像 pip3 不行 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:3:1","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"问题 2：找不到数据集 开始训练时找不到数据集。 Traceback (most recent call last): File \"trainval_net.py\", line 197, in \u003cmodule\u003e imdb, roidb, ratio_list, ratio_index = combined_roidb(args.imdb_name) File \"/content/faster-rcnn.pytorch/lib/roi_data_layer/roidb.py\", line 116, in combined_roidb roidbs = [get_roidb(s) for s in imdb_names.split('+')] File \"/content/faster-rcnn.pytorch/lib/roi_data_layer/roidb.py\", line 116, in \u003clistcomp\u003e roidbs = [get_roidb(s) for s in imdb_names.split('+')] File \"/content/faster-rcnn.pytorch/lib/roi_data_layer/roidb.py\", line 109, in get_roidb imdb = get_imdb(imdb_name) File \"/content/faster-rcnn.pytorch/lib/datasets/factory.py\", line 66, in get_imdb return __sets[name]() File \"/content/faster-rcnn.pytorch/lib/datasets/factory.py\", line 25, in \u003clambda\u003e __sets[name] = (lambda split=split, year=year: pascal_voc(split, year)) File \"/content/faster-rcnn.pytorch/lib/datasets/pascal_voc.py\", line 56, in __init__ self._image_index = self._load_image_set_index() File \"/content/faster-rcnn.pytorch/lib/datasets/pascal_voc.py\", line 107, in _load_image_set_index 'Path does not exist: {}'.format(image_set_file) AssertionError: Path does not exist: /content/faster-rcnn.pytorch/data/VOCdevkit2007/VOC2007/ImageSets/Main/trainval.txt 因为下载完的数据集解压缩后默认文件夹是 VOCdevkit，而代码中写死了去 VOCdevkit2007 找。 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:3:2","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"0x03 补充：TensorBoard 在 Colab 里的用法简记 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:4:0","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"为什么这是个问题？ Colab 是远程操作，不像本机使用的话环回地址加端口号就访问得到，Colab 宿主机的 IP 不允许公网直接访问，需要反代才能正常访问 Colab 开放出来的 Tensorbaord 端口。如果不反代就只能用 tensorboardX。 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:4:1","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"操作步骤 安装 TensorBoard for Pytorch：TensorBoardX !pip install tensorboardX 根据 TensorBoardX 项目主页的教程我们其实还需要安装 TensorBoard，但 通过 pip 安装 TensorFlow 时，也会自动安装 TensorBoard。 Colab 作为 Google 亲儿子，自然已经安装妥当。 在程序中引入（修改 faster-rcnn.pytorch 项目中的已有代码） from tensorboardX import SummaryWriter …… logger = SummaryWriter(\"logs\")# 指定传递给TensorBoardX用来绘图的数据的存放位置： # 项目根目录下的logs文件夹，其在训练开始后自动创建 …… info = { 'loss': loss_temp, 'loss_rpn_cls': loss_rpn_cls, 'loss_rpn_box': loss_rpn_box, 'loss_rcnn_cls': loss_rcnn_cls, 'loss_rcnn_box': loss_rcnn_box } logger.add_scalars(\"logs_s_{}/losses\".format(args.session), info, (epoch - 1) * iters_per_epoch + step) 使用 魔法函数MagicCommands 启用 TensorBaordX 魔法函数是 IPython 内核的特性，意在简明地解决数据处理过程中的常见问题。 %load_ext Load an IPython extension by its module name. https://ipython.readthedocs.io/en/stable/interactive/magics.html %load_ext tensorboard # %reload_ext tensorboard %tensorboard --logdir \"/content/faster-rcnn.pytorch/logs\" 这个 code cell 执行完毕后不会终止而是默默等待数据，接着再执行训练 code cell 这边就会出曲线了。 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:4:2","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"更多 Tensorboard 教程： https://www.tensorflow.org/guide/summaries_and_tensorboard?hl=zh-cn https://colab.research.google.com/drive/1NbEqqB42VSzYt-mmb4ESc8yxL05U2TIV#scrollTo=ZnDqxE2msZbd https://zhuanlan.zhihu.com/p/39115355 ","date":"2019-09-23","objectID":"/run-faster-r-cnn-on-colab/:4:3","tags":null,"title":"在 Colab 运行 Faster R-CNN 时的问题简记","uri":"/run-faster-r-cnn-on-colab/"},{"categories":null,"content":"Rime 输入法的安装是一个颇为让人头疼的问题","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"Ubuntu 上比较流行又好装的中文输入法应该就只有 搜狗输入法 for Linux 一款了，但如果你追求简洁纯粹，那 Rime 输入法 或许是你的菜。 Rime 是一款由 佛振 主导开发的自由软件，支持在 Windows、macOS 和 Linux 操作系统上运行。它的优点是干净纯粹支持高度的客制化，缺点是较差的联想功能（自己慢慢养词库或者导入其它输入法的词库）和比较复杂的配置。本文将专注于介绍 Rime 在安装阶段的配置过程。 ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:0:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"1. 基本安装 在 Rime 下载页面的 Linux 章节 中给出了基于 IBus 和 Fcitx 两种输入法框架的安装指导，我这里是选择 IBus 框架： sudo apt-get install ibus-rime # 可选：安装双拼 sudo apt-get install librime-data-double-pinyin ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:1:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"2. 切换到 IBus 从启动台打开「输入法」或在终端中使用命令开启： im-config 然后选择 ibus ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:2:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"3. 添加 Rime 到 IBus 在终端中使用以下命令开启 IBus 设置： ibus-setup 在输入法中添加 Chinese - Rime。如果看不到这一项，需要在系统设置的语言中添加中文并拖动到最顶，然后登出系统以使新的语言设置生效。 ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:3:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"4. 切换 IBus engine 到 Rime 使用如下命令切换到 Rime： ibus engine rime 其它有用的命令 # 列出所有可用引擎 ibus list-engine # 查看当前使用引擎 ibus engine ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:4:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"5. 可选：在 Rime 中启用小鹤双拼 修改配置文件 ~/.config/ibus/rime/default.yaml ，依照现有布局加入条目： - schema：double_pinyin_flypy 然后在输入时就能通过 ctrl + `/`` 呼出方案选单。 Tip 更多配置教程请查阅 Rime 帮助文档 ","date":"2019-05-24","objectID":"/install-and-setup-rime-on-ubuntu/:5:0","tags":null,"title":"如何在 Ubuntu 上安装配置 Rime 输入法","uri":"/install-and-setup-rime-on-ubuntu/"},{"categories":null,"content":"0x00 下载 CUDA 和 cuDNN 下载 CUDA Toolkit 8.0 和 cuDNN v7.1.4, for CUDA 8.0 CUDA 下载：https://developer.nvidia.com/cuda-80-ga2-download-archive cuDNN 下载：https://developer.nvidia.com/rdp/cudnn-archive ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:1:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"0x01 安装 CUDA user@machine:~# sudo sh cuda_8.0.61_375.26_linux.run …… Do you accept the previously read EULA? accept/decline/quit: accept Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 375.26? (y)es/(n)o/(q)uit: n Install the CUDA 8.0 Toolkit? (y)es/(n)o/(q)uit: y Enter Toolkit Location [ default is /usr/local/cuda-8.0 ]: # CUDA_HOME=/usr/local/cuda Do you want to install a symbolic link at /usr/local/cuda? (y)es/(n)o/(q)uit: y Install the CUDA 8.0 Samples? (y)es/(n)o/(q)uit: y Enter CUDA Samples Location [ default is /home/user ]: Installing the CUDA Toolkit in /usr/local/cuda-8.0 ... Installing the CUDA Samples in /home/user ... Copying samples to /home/user/NVIDIA_CUDA-8.0_Samples now... Finished copying samples. Installing the CUDA Toolkit in /usr/local/cuda-8.0 ... Missing recommended library: libGLU.so Missing recommended library: libXmu.so Installing the CUDA Samples in /home/user ... Copying samples to /home/user/NVIDIA_CUDA-8.0_Samples now... Finished copying samples. =========== = Summary = =========== Driver: Not Selected Toolkit: Installed in /usr/local/cuda-8.0 Samples: Installed in /home/user, but missing recommended libraries Please make sure that - PATH includes /usr/local/cuda-8.0/bin - LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root To uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA. ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work. To install the driver using this installer, run the following command, replacing \u003cCudaInstaller\u003e with the name of this run file: sudo \u003cCudaInstaller\u003e.run -silent -driver Logfile is /tmp/cuda_install_6304.log Signal caught, cleaning up ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:2:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"故障排除：Missing libGLU.so、libXmu.so # 对于 Missing recommended library: libGLU.so # 和 Missing recommended library: libXmu.so # 安装依赖库： user@machine:~# sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev # 对于 ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work. 不用管 ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:2:1","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"将 CUDA 安装目录写入环境变量 user@machine:~# sudo vim ~/.bashrc # 将以下内容写入到~/.bashrc尾部： export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}} export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:2:2","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"运行 CUDA 测试用例 user@machine:~# cd /usr/local/cuda-8.0/samples/1_Utilities/deviceQuery user@machine:~# sudo make \"/usr/local/cuda-8.0\"/bin/nvcc -ccbin g++ -I../../common/inc -m64 -gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_60,code=compute_60 -o deviceQuery.o -c deviceQuery.cpp nvcc warning : The 'compute_20', 'sm_20', and 'sm_21' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning). \"/usr/local/cuda-8.0\"/bin/nvcc -ccbin g++ -m64 -gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_60,code=compute_60 -o deviceQuery deviceQuery.o nvcc warning : The 'compute_20', 'sm_20', and 'sm_21' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning). mkdir -p ../../bin/x86_64/linux/release cp deviceQuery ../../bin/x86_64/linux/release # 如果显示一些关于GPU的信息，则说明安装成功 user@machine:~# sudo ./deviceQuery ./deviceQuery Starting... CUDA Device Query (Runtime API) version (CUDART static linking) Detected 1 CUDA Capable device(s) Device 0: \"GeForce GTX 950M\" CUDA Driver Version / Runtime Version 9.0 / 8.0 CUDA Capability Major/Minor version number: 5.0 Total amount of global memory: 2003 MBytes (2100232192 bytes) ( 5) Multiprocessors, (128) CUDA Cores/MP: 640 CUDA Cores GPU Max Clock rate: 1124 MHz (1.12 GHz) Memory Clock rate: 900 Mhz Memory Bus Width: 128-bit L2 Cache Size: 2097152 bytes Maximum Texture Dimension Size (x,y,z) 1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096) Maximum Layered 1D Texture Size, (num) layers 1D=(16384), 2048 layers Maximum Layered 2D Texture Size, (num) layers 2D=(16384, 16384), 2048 layers Total amount of constant memory: 65536 bytes Total amount of shared memory per block: 49152 bytes Total number of registers available per block: 65536 Warp size: 32 Maximum number of threads per multiprocessor: 2048 Maximum number of threads per block: 1024 Max dimension size of a thread block (x,y,z): (1024, 1024, 64) Max dimension size of a grid size (x,y,z): (2147483647, 65535, 65535) Maximum memory pitch: 2147483647 bytes Texture alignment: 512 bytes Concurrent copy and kernel execution: Yes with 1 copy engine(s) Run time limit on kernels: Yes Integrated GPU sharing Host Memory: No Support host page-locked memory mapping: Yes Alignment requirement for Surfaces: Yes Device has ECC support: Disabled Device supports Unified Addressing (UVA): Yes Device PCI Domain ID / Bus ID / location ID: 0 / 1 / 0 Compute Mode: \u003c Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) \u003e deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 950M Result = PASS ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:2:3","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"0x02 安装 cuDNN 安装教程： https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html user@machine:~# sudo dpkg -i ~/Downloads/libcudnn7_7.1.4.18-1+cuda8.0_amd64.deb user@machine:~# sudo dpkg -i ~/Downloads/libcudnn7-dev_7.1.4.18-1+cuda8.0_amd64.deb user@machine:~# sudo dpkg -i ~/Downloads/libcudnn7-doc_7.1.4.18-1+cuda8.0_amd64.deb ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:3:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"运行 cuDNN 测试用例 # Copy the cuDNN sample to a writable path. user@machine:~# cp -r /usr/src/cudnn_samples_v7/ $HOME # Go to the writable path. user@machine:~# cd $HOME/cudnn_samples_v7/mnistCUDNN # Compile the mnistCUDNN sample. user@machine:~# make clean \u0026\u0026 make # Run the mnistCUDNN sample. 'Test passed!' means cuDNN works. user@machine:~# ./mnistCUDNN …… Test passed! 故障排除：没有 libcudart.so.8.0 ./mnistCUDNN: error while loading shared libraries: libcudart.so.8.0: cannot open shared object file: No such file or directory # 解决办法：https://blog.csdn.net/u011636567/article/details/77162217 # 首先检查 /usr/local/cuda-8.0/lib64 目录，看看 libcudart.so.8.0 是否存在，如果不存在，则先正确安装 cuda; 如果确定 cuda 已经存在，这个问题的出现与 Linux 的 ldconfig 命令有关 以下两种方法同理： # 1. user@machine:~# sudo ldconfig /usr/local/cuda-8.0/lib64 # 2. user@machine:~# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-8.0/lib64 # 如果仍然不行，再尝试执行: user@machine:~# export PATH=$PATH:/usr/local/cuda-8.0/bin user@machine:~# export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda-8.0/lib64 user@machine:~# source /etc/profile ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:3:1","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"0x03 在 Caffe 中启用 GPU ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:4:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"查看 CUDA 和 cuDNN 版本： # CUDA user@machine:~# cat /usr/local/cuda/version.txt # if cuDNN was installed from a tar file user@machine:~# cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 # if cuDNN was installed from a debian file user@machine:~# cat /usr/include/cudnn.h | grep CUDNN_MAJOR -A 2 ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:4:1","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"切换 Caffe 到 cuDNN 加速模式并测试运行手写体识别 首先修改 Makefile.config： user@machine:~# sudo vim ~/caffe/Makefile.config # 注释掉仅 CPU 模式开关 # CPU_ONLY := 1 # 打开 cuDNN 加速开关 USE_CUDNN := 1 然后重新编译整个工程（根据输出可以观察到编译的对象是 ~/caffe/src/caffe 下的 *.cu 和 *.cpp）： user@machine:~# make clean \u0026\u0026 make -j8 在运行时启用 GPU 有两种方式: 运行 MNIST 例程前，修改训练超参数文件： user@machine:~# sudo vim examples/mnist/lenet_solver.prototxt # 改 CPU 为 GPU solver_mode: GPU # 运行 MNIST 识别程序 user@machine:~# ./examples/mnist/train_lenet.sh 运行时使用参数指定 GPU 执行 user@machine:~# ./examples/mnist/train_lenet.sh -gpu 0 ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:4:2","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"0x04 补充：确认 make 编译时调用的 GPU 核数 总核数 = 物理 CPU 个数 X 每颗物理 CPU 的核数 总逻辑 CPU 数 = 物理 CPU 个数 X 每颗物理 CPU 的核数 X 超线程数 # 查看物理 CPU 个数 user@machine:~# cat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l # 查看每个物理 CPU 中 core 的个数（即核数） user@machine:~# cat /proc/cpuinfo| grep \"cpu cores\"| uniq # 查看逻辑 CPU 的个数 user@machine:~# cat /proc/cpuinfo| grep \"processor\"| wc -l 16 # make 的时候就可以 make -j16 ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:5:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"0x05 补充：监测 GPU 运行情况 第三方工具：gmonitor user@machine:~# tar xvzf gmonitor-v1.3.tar.gz user@machine:~# sudo cp ~/Downloads/gmonitor /usr/local/bin/ user@machine:~# gmonitor 官方工具：nvidia-smi（安装完显卡驱动后自带） # 每10s刷新一次 user@machine:~# watch -n 10 nvidia-smi ","date":"2019-04-09","objectID":"/enable-gpu-support-for-caffe-on-linux/:6:0","tags":null,"title":"为 Linux 上的 Caffe 启用 GPU 支持","uri":"/enable-gpu-support-for-caffe-on-linux/"},{"categories":null,"content":"安装 appimage 格式深度截图并加入到启动台","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"Update 深度截图目前已有 官方介绍、使用说明，但依然没有提供从深度商店外安装深度截图的教程。 appimage 格式深度截图的下载地址已经失效，但依然可以从互联网档案馆上 下载（35.7 MB）。 ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:0:0","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"1. 下载深度截图 从以下地址下载第三方打包的深度截图： https://github.com/ZetaoYang/deepin-app-package/releases ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:1:0","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"2. 运行 首先添加执行权限 chmod +x ./Deepin_Screenshot-x86_64.AppImage 使用方法： GUI： 文件管理器双击 CLI：~/Downloads/Deepin_Screenshot_4.0.10.4-x86_64.AppImage ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:2:0","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"3. 让深度截图在 Ubuntu 启动台显示 ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:3:0","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"3.1 AppImageLauncher 法 AppImageLauncher 顾名思义是一个可以快速把 appimage 软件加入启动台的工具。只需要从 https://github.com/TheAssassin/AppImageLauncher/releases 下载的合适版本，然后执行以下命令安装 sudo dpkg -i ~/Downloads/appimagelauncher_1.0.3-travis508.git20190223.0c6d768_amd64.deb 理论上再次双击之前的 Deepin_Screenshot_4.0.10.4-x86_64.AppImage 就可以初始化 AppImageLauncher，进而可以把 Deepin_Screenshot_4.0.10.4-x86_64.AppImage 显示在 LaunchPad。不幸的是我双击后遇到闪退。 ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:3:1","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"3.2 手动法 此方法适用于所有只能命令行启动的程序，只需要在 /usr/share/applications/ 下添加一个配置文件就能让程序显示在 Ubuntu 启动台上。但在开始之前，为了美观还需要一个合适的图标，我是从 http://appstore.deepin.com/data/v1/workaround/metadata/deepin-screenshot/meta/icons/deepin-screenshot.svg 下载图标，然后用在线工具转为PNG格式备用。 按照 文件系统层次结构标准 为深度截图在 /opt 下创建目录： sudo mkdir /opt/deepinscreenshot 然后把 appimage 程序和 PNG 格式的图标复制进去： sudo cp ~/Downloads/Deepin_Screenshot_4.0.10.4-x86_64.AppImage /opt/deepinscreenshot/ sudo cp ~/Downloads/deepin-screenshot-24px.png /opt/deepinscreenshot/ 注入灵魂 注册应用程序到启动台： sudo vim /usr/share/applications/biubiubiu.desktop biubiubiu.desktop 的内容示例 [Desktop Entry] Name=biubiubiu Name[zh_CN]=深度截图 Exec=/opt/deepinscreenshot/Deepin_Screenshot_4.0.10.4-x86_64.AppImage Icon=/opt/deepinscreenshot/deepin-screenshot-24px.png Terminal=false X-MultipleArgs=false Type=Application Encoding=UTF-8 Categories=Application; StartupNotify=false 然后就可以在 LaunchPad 看到图标了，鼠标拖拽即可固定到 dock 栏。 ","date":"2019-02-25","objectID":"/install-deepin-screenshot-on-ubuntu/:3:2","tags":null,"title":"如何在 Ubuntu 上安装深度截图","uri":"/install-deepin-screenshot-on-ubuntu/"},{"categories":null,"content":"手动安装 deepin 商店版 TIM 的过程记录","date":"2019-02-25","objectID":"/install-qq-on-ubuntu/","tags":null,"title":"如何在 Ubuntu 上安装 QQ","uri":"/install-qq-on-ubuntu/"},{"categories":null,"content":"Update 深度的 维基页面 现在已经列出了直接使用 apt 命令安装 QQ轻聊版、QQ 标准版 的方法。 ","date":"2019-02-25","objectID":"/install-qq-on-ubuntu/:0:0","tags":null,"title":"如何在 Ubuntu 上安装 QQ","uri":"/install-qq-on-ubuntu/"},{"categories":null,"content":"1. 安装 Deepin wine 环境 # 下载 git clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git # 执行安装脚本 sudo sh ./deepin-wine-for-ubuntu/install.sh ","date":"2019-02-25","objectID":"/install-qq-on-ubuntu/:1:0","tags":null,"title":"如何在 Ubuntu 上安装 QQ","uri":"/install-qq-on-ubuntu/"},{"categories":null,"content":"2. 安装 Deepin 版 TIM 安装包 # 下载 wget http://packages.deepin.com/deepin/pool/non-free/d/deepin.com.qq.office/deepin.com.qq.office_2.0.0deepin4_i386.deb # 解包安装 sudo dpkg -i ./Downloads/deepin.com.qq.office_2.0.0deepin4_i386.deb # 在 Ubuntu 的 Lauchpad 应已出现 TIM 的图标，单击启动、登录，应该就可以正常使用了 ","date":"2019-02-25","objectID":"/install-qq-on-ubuntu/:2:0","tags":null,"title":"如何在 Ubuntu 上安装 QQ","uri":"/install-qq-on-ubuntu/"},{"categories":null,"content":"3. 可选：解决在高分屏 GUI 过小的问题 使用如下命令调出 wine 的配置页面： WINEPREFIX=~/.deepinwine/Deepin-TIM/ deepin-wine winecfg 在 Graphics 选项卡中往大调整 Screen resolution 的值，调好后重新运行 TIM 即可看到效果。 ","date":"2019-02-25","objectID":"/install-qq-on-ubuntu/:3:0","tags":null,"title":"如何在 Ubuntu 上安装 QQ","uri":"/install-qq-on-ubuntu/"}]